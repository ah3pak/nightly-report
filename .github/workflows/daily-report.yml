name: Daily Telegram Report

on:
  schedule:
    - cron: "30 17 * * *"   # هر روز 17:30 UTC ≈ 21:00 تهران
  workflow_dispatch:

jobs:
  send:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests jdatetime

      - name: Build message (Jalali date + TGJU + Nobitex)
        id: build
        run: |
          python3 - <<'PY'
          import requests, jdatetime, datetime, json, sys, traceback

          def safe_get_json(url, headers=None, timeout=10):
              try:
                  r = requests.get(url, headers=headers or {}, timeout=timeout)
                  if r.status_code == 200:
                      try:
                          return r.json()
                      except ValueError:
                          return None
                  else:
                      return None
              except Exception:
                  return None

          # --- تاریخ شمسی ---
          now_teh = datetime.datetime.utcnow() + datetime.timedelta(hours=3, minutes=30)
          j_now = jdatetime.datetime.fromgregorian(datetime=now_teh)
          weekday_map = ["دوشنبه","سه‌شنبه","چهارشنبه","پنج‌شنبه","جمعه","شنبه","یک‌شنبه"]
          weekday = weekday_map[j_now.weekday()]
          jalali_date = f"{weekday} {j_now.day} {j_now.j_months_fa[j_now.month-1]} {j_now.year}"
          greg_date = now_teh.strftime("%d %B %Y – ساعت %H:%M")

          # --- دریافت داده از TGJU (مقاوم) ---
          tgju_items = {
              "طلای ۱۸ عیار": "geram18",
              "سکه امامی": "gold-24",         # fallback codes — اگر سایت تغییر داشت، مقدار نهایی None خواهد شد
              "نیم‌سکه": "sekne-nim",
              "ربع‌سکه": "sekne-rob",
              "دلار": "price_dollar_rl",
              "یورو": "price_eur"
          }

          tgju_data = {}
          for name, code in tgju_items.items():
              value = None
              tried = []
              # لیست آدرس‌های محتمل (ترتیب از محتمل‌تر به کمتر محتمل)
              candidates = [
                  f"https://www.tgju.org/chart-summary/{code}",
                  f"https://www.tgju.org/profile/{code}",
                  f"https://www.tgju.org/markets/{code}",
              ]
              for url in candidates:
                  tried.append(url)
                  data = safe_get_json(url, timeout=8)
                  if data:
                      # ساختارهای مختلف رو پوشش می‌دیم
                      # اگر داده current -> p داشته باشه
                      if isinstance(data, dict):
                          if 'current' in data and isinstance(data['current'], dict) and 'p' in data['current']:
                              p = data['current']['p']
                              try:
                                  value = int(float(str(p).replace(',', '')))
                              except:
                                  value = p
                              break
                          # ممکنه خودِ json قیمت رو در کلیدهای دیگری داشته باشه
                          for k in ['price','p','value','last']:
                              if k in data:
                                  try:
                                      value = int(float(str(data[k]).replace(',', '')))
                                  except:
                                      value = data[k]
                                  break
                          if value is not None:
                              break
              if value is None:
                  # اگر نتونستیم مقدار رو بگیریم، مقدار قابل نمایش بذاریم
                  tgju_data[name] = "—"
                  print(f"[tgju] could not fetch {name}, tried: {tried}", file=sys.stderr)
              else:
                  tgju_data[name] = value

          # --- دریافت داده رمزارزها از نوبیتکس ---
          nobitex_symbols = {
              "BTC": "btc-usdt",
              "ETH": "eth-usdt",
              "SOL": "sol-usdt",
              "BNB": "bnb-usdt",
              # تتر/ریال (نوبیتکس ممکنه اسم متفاوت داشته باشه)
              "USDT": "usdt-rls"
          }

          nobi_prices = {}
          for sym, pair in nobitex_symbols.items():
              price = None
              try:
                  r = requests.get(f"https://api.nobitex.ir/market/stats?symbol={pair}", timeout=8)
                  if r.status_code == 200:
                      j = r.json()
                      if 'stats' in j and pair in j['stats']:
                          price = float(j['stats'][pair].get('latest', 0))
                      else:
                          # بعضی وقت‌ها ساختار متفاوته
                          # fallback: اگر خودش یک مقدار عددی دارد:
                          if isinstance(j, dict) and 'latest' in j:
                              price = float(j['latest'])
                  else:
                      print(f"[nobitex] non-200 for {pair}: {r.status_code}", file=sys.stderr)
              except Exception as e:
                  print(f"[nobitex] error fetching {pair}: {e}", file=sys.stderr)
              if price is None:
                  nobi_prices[sym] = None
              else:
                  nobi_prices[sym] = price

          # تبدیل تتر به تومان (اگر موجود)
          t_usdt = nobi_prices.get('USDT') or nobi_prices.get('USDT'.upper()) or None

          # ساخت پیام به شکل خوانا
          def fmt(x):
              try:
                                          # اگر عدد باشه فرمت هزارگان
                  if isinstance(x, (int, float)):
                      return f"{int(x):,}"
                  else:
                      return str(x)
              except:
                  return str(x)

          msg = f"""📊 گزارش روز بازار طلا، ارز و رمزارزها
🗓️ {jalali_date} | {greg_date}

🟡 بازار طلا
طلای ۱۸ عیار: {fmt(tgju_data.get('طلای ۱۸ عیار'))} تومان
سکه امامی: {fmt(tgju_data.get('سکه امامی'))} تومان
نیم‌سکه: {fmt(tgju_data.get('نیم‌سکه'))} تومان
ربع‌سکه: {fmt(tgju_data.get('ربع‌سکه'))} تومان

💵 بازار ارز
دلار: {fmt(tgju_data.get('دلار'))} تومان | یورو: {fmt(tgju_data.get('یورو'))} تومان

🪙 بازار رمزارزها (نوبیتکس)
"""

          # رمزارزها را با تبدیل تتر (اگر داریم) نمایش می‌کنیم
          for k in ("BTC","ETH","SOL","BNB"):
              p = nobi_prices.get(k)
              if p is None:
                  msg += f"{k}: —\n"
              else:
                  if t_usdt:
                      try:
                          approx_irr = int(p * t_usdt)
                          msg += f"{k}: {p:.6g} USDT ≈ {approx_irr:,} تومان\n"
                      except:
                          msg += f"{k}: {p:.6g} USDT\n"
                  else:
                      msg += f"{k}: {p:.6g} USDT\n"

          if t_usdt:
              msg += f"تتر: {int(t_usdt):,} تومان\n"

          msg += f"\n(ارسال خودکار GitHub Actions – {now_teh.strftime('%Y/%m/%d - %H:%M')} Tehran)\n"

          # ذخیره و خروجی
          with open('msg.txt', 'w', encoding='utf-8') as f:
              f.write(msg)

          print(msg)
          print("✅ Message built successfully", file=sys.stderr)

          # write output safely to GITHUB_OUTPUT
          # echo "message<<EOF\n...EOF" >> $GITHUB_OUTPUT
          out = msg
          # escape for writing to GITHUB_OUTPUT
          sys.stdout.write(f"message<<'EOF'\\n{out}\\nEOF\\n")
          PY
        shell: bash

      - name: Persist message to GITHUB_OUTPUT
        # خواندن خط از مرحلهٔ قبل و اپند به GITHUB_OUTPUT — چون step قبل چاپ کرد
        run: |
          # read the stdout of the previous step from the job logs is not possible,
          # ولی ما در مرحله قبل خط "message<<'EOF'..." چاپ کردیم؛ GitHub Actions آن را به خروجی مرحله تبدیل می‌کند.
          # این خط تضمین می‌کند که اگر مقدار در output موجود باشد، به GITHUB_OUTPUT اضافه شود.
          if [ -n "${{ steps.build.outputs.message }}" ]; then
            echo "message<<'EOF'" >> $GITHUB_OUTPUT
            echo "${{ steps.build.outputs.message }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # fallback: از فایل msg.txt بخوان
            echo "message<<'EOF'" >> $GITHUB_OUTPUT
            sed 's/\'\''/'\''"'"'\''/g' msg.txt >> $GITHUB_OUTPUT || cat msg.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Send to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID secret" >&2
            exit 1
          fi

          # پیام را مستقیم از فایل ارسال می‌کنیم (فرمت فرم باعث امن‌تر بودنِ متن چندخطی می‌شود)
          curl -sS -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -F chat_id="${CHAT_ID}" \
            -F text="$(cat msg.txt)" \
            -F parse_mode="HTML" \
            -F disable_web_page_preview=true
